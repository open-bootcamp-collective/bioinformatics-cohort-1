# -*- coding: utf-8 -*-
"""scikit_learn_tutorial_pca_kmeans.py.ipynb"""

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G5EshVL0wnkC0lC1wvk9BacGGdEZFmAU
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
df = pd.read_csv("/content/pima_diabetes_data.csv")

# Split features and target
X = df.drop("Outcome", axis=1)
y = df["Outcome"]

# Replace zeros with NaNs in certain columns
features_with_zero = ["Glucose", "BloodPressure", "SkinThickness", "Insulin", "BMI"]
X[features_with_zero] = X[features_with_zero].replace(0, np.nan)
X[features_with_zero] = X[features_with_zero].fillna(X[features_with_zero].mean())

# Standardize the data
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Apply PCA (2 components)
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

# PCA Explained Variance
print("PCA Explained Variance:", pca.explained_variance_ratio_ * 100)

# Plot PCA
plt.figure(figsize=(8, 6))
scatter = plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y, cmap="coolwarm", alpha=0.7, edgecolor="k")
plt.xlabel("Principal Component 1")
plt.ylabel("Principal Component 2")
plt.title("PCA of Pima Diabetes Dataset")
plt.colorbar(scatter, label="Outcome")
plt.grid(True)
plt.show()

# K-means clustering on PCA-reduced data
kmeans = KMeans(n_clusters=2, random_state=42)
clusters = kmeans.fit_predict(X_pca)

# Confusion matrix comparing clusters to true labels
conf_matrix = confusion_matrix(y, clusters)
print("\nConfusion Matrix (K-means vs Actual):\n", conf_matrix)

# Scatter plot of clusters
plt.figure(figsize=(10, 6))
sns.scatterplot(x=X_pca[:, 0], y=X_pca[:, 1], hue=clusters, palette="Set2")
plt.title("K-means Clusters (k=2) on PCA-transformed Data")
plt.xlabel("Principal Component 1")
plt.ylabel("Principal Component 2")
plt.legend(title="Cluster")
plt.grid(True)
plt.show()

# Train/test split for logistic regression on PCA features
X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.2, random_state=42)

# Logistic Regression
clf = LogisticRegression()
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)

# Evaluation
print("\nAccuracy (Logistic Regression on PCA):", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
