# -*- coding: utf-8 -*-
"""Biological Databases.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-zcIPeumi9cJYWrCklaHlyJaRwTKVkpB

# NCBI
"""

!pip install biopython #! used for bash commands

import Bio
from Bio import SeqIO, SearchIO, Entrez
from Bio.Seq import Seq
from Bio.Blast import NCBIWWW

import pandas as pd

#best practice is to inform Entrez who you are through email address
Entrez.email = "williams.lashandar@gmail.com"

"""## Search Using A Query"""

#db = database
#idtype = Specifies the type of identifier to return for sequence database
#retmax = Total number of UIDs from the retrieved set to be shown in the XML output (default=20)
#term = query
#for more information https://www.ncbi.nlm.nih.gov/books/NBK25499/#chapter4.ESearch

stream = Entrez.esearch(
    db="nucleotide", term="Coronavirus spike gene", idtype="acc", retmax = 25
)

#Return a handle to the results which are always in XML format.

record = Entrez.read(stream)

#Parses XML file

stream

record

id_list = record["IdList"] #extract id list from the dictionary
print(len(id_list))
print(id_list)

#db = database
#id = comma-separated for multiple IDs
#rettype = retrieval type
#retmode = retrieval mode
#fmi https://www.ncbi.nlm.nih.gov/books/NBK25499/table/chapter4.T._valid_values_of__retmode_and/?report=objectonly

handle = Entrez.efetch(db="nucleotide", id=",".join(id_list), rettype="fasta", retmode="text")
sequences = handle.read()
handle.close()

print(len(sequences))
print(sequences[0:2500])

#export fasta sequences as output.fasta
with open("output.fasta", "w") as f:
    f.write(sequences)

!grep -c ">" output.fasta #sanity check, grep is used for searching and manipulating text patterns within files

"""## Given A FASTA File"""

#print accession numbers from fasta file
for record in SeqIO.parse('output.fasta', 'fasta'):
    print(record.id)

#print DNA sequence from fasta file
for record in SeqIO.parse('output.fasta', 'fasta'):
    print(record.seq)

#translate DNA sequences from fasta file
for record in SeqIO.parse('output.fasta', 'fasta'):
    print(record.seq.translate())

#print name and sequence length
for record in SeqIO.parse('output.fasta', 'fasta'):
    print(record.description, ' ', len(record.seq))
    print('\n')

#find terms within record descriptions
for record in SeqIO.parse('output.fasta','fasta'):
    if record.description.find('Feline') > 0:
        print(record.description)
        print('\n')

#create table with fasta file header, sequence length, gc content
taxonomy_store = []

for record in SeqIO.parse('output.fasta', 'fasta'):
    header_data = record.description.split('=')
    taxonomic_info = header_data[0]
    length = len(record.seq)

    # 3. Calculate GC content
    gc_count = record.seq.count('G') + record.seq.count('C')
    gc_content = round((gc_count / length) * 100, 2)
    taxonomy_store.append([taxonomic_info, length, gc_content])

taxonomy_store

#save results in a table and export as a CSV
df = pd.DataFrame(taxonomy_store, columns = ['taxonomy', 'sequence_length','gc_content (%)'])
df.to_csv('output.csv', index=False)
df

"""## Optional: BLAST Search (Given a Sequence)



*   Basic Local Alignment Search Tool (BLAST) finds regions of local similarity between sequences.
* The program compares nucleotide or protein sequences to sequence databases and calculates the statistical significance of matches.
* BLAST can be used to infer functional and evolutionary relationships between sequences as well as help identify members of gene families.
* https://blast.ncbi.nlm.nih.gov/Blast.cgi




"""

#copy sequence from fasta file and convert to sequence format

dna_seq = 'ATGAAGTCTTTAACTTACTTCTGGTTGCTCTTACCAGTACTTTCAACACTTAGCCTACCACAAGATGTCACTAGGTGCCAGCTCACTACTAATTTTAGGCGGTTCTTTTCAAAATTTAATGTGCAGGCACCTGCTGTCGTTGTTTTGGGTGGCTATTTACCTAGTATGAACTCTTCTAGCTGGTACTGTGGCACAGGCCTTGAAACTGCTAGTGGCGTTCATGGCATTTTTCTCAGTTACATTGATTCTGGTCAAGGCTTTGAGATTGGTATTTCACAGGAGCCGTTTGATCCTAGTGGTTACCAGCTTTACCTACATAAGGCCACTAATGGTAACATTGGTGCTGTTGCACGACTGCGTATTTGCCAGTTTCCAGATAATAAAACATTGGGCCCTTCCAGCGGTGTTACATCAGGTCGTAATTGCCTATTCAACAAAGCTATCCCAGCTCATATGCAGGATGGGAAAAATGTTGTTATCGGCATAACATGGGACAATGATCGTGTCACTGTTTTTGCTGACAAGATCTATCATTTTTATCTTAAAAATGACTGGTCCCGTGTTGCGACAAGATGTTATAATAAAAGAAGTTGTGCTATGCAATATGTTTATACACCTACCTACTACATGCTTAATGTTACTAGTGCAGGTGAGGATGGCATTTATTATCAACCATGTACAGCTAATTGCATTGGTTATGTTGCCAATGTATTTGCTACTGAGCCCAATGGCTACATACCAGAAGGTTTTAGTTTTAATAATTGGTTTCTTTTGTCCAATGATTCCACTTTGGTGCATGGTAAGGGGGTTTCCAACCAACCATTGTTGGTCAATTGTCTTTTGGCCATTCCTAAGATTTATGGACTAGGCCAATTTTTCTCCTTTAATCAAACGATCGATGGGGTTTGTAATGGAGCTTCTGTGCAGCGTGCACCAGAGGCTCTGAGGTTTAATATTAATGACACCTCTGTCATTCTTGCTGAAGGCTCAATTGTACTTCATACTGCTTTTGGAACAAATCTTTCTTTTGTTTGCAGTAATTCCTCAAATCCTCATTTAGCCACCTTTGCCATACCTTTGGGTGCTACCCAAGTACCCTATTATTGTTTTCTTAAAGTGGATACTTACAACTCCACTGTTTATAAATTCTTGGCTGTTTTACCTCCCACCGTCAGGGAAATTGTCATCACCAAGTATGGTGATGTTTATGTCAATGGTTTTGGCTACTTGCATCTCGGTTTGTTGGATGCAGTCACAATTAATTTCACTGGTCATGGCACTGACGATGATGTTTCTGGTTTTTGGACCATAGCATCGACTAATTTTGTTGATGCACTCATCGAAGTTCAAGGAACTTCCATTCAGCGTATTCTTTATTGTGATGATCCTGTTAGCCAACTCAAGTGTTCTCAGGTTGCTTTTGACCTTGACGATGGTTTTTACCCTATTTCTTCTAGAAACCTTCTGAGTCATGAACAGCCAATTTCTTTTGTTACTCTGCCATCATTTAATGATCATTCTTTTGTTAACATTACTGTCTCTGCTTCCTTTGGTGGTCATAGTGGTGCCAACCTTATTGCATCTGACACTACTATCAATGGTTTTAGTTCTTTCTGTGTTGACACTAGACAATTTACCATTTCACTGTTTTATAACGTTACAAACAGTTATGGTTATGTGTCTAAATCACAGGACAGTAATTGCCCTTTCACCTTGCAATCTGTTAATGATTACTTGTCTTTTAGCAAATTTTGTGTTTCCACCAGCCTTTTGGCTAGTGCCTGTACCATAGATCTTTTTGGTTACCCTGAGTTTGGTAGTGGTGTTAAGTTTACGTCCCTTTACTTTCAATTCACAAAGGGTGAGTTGATTACTGGCACGCCTAAACCACTTGAAGGTGTCACGGACGTTTCTTTTATGACTCTGGATGTGTGTACCAAGTATACTATCTATGGCTTTAAAGGCGAGGGTATCATTACCCTTACAAATTCTAGCTTTTTGGCAGGTGTTTATTACACATCTGATTCCGGACAGTTGTTAGCCTTTAAGAATGTCACTAGTGGTGCTGTTTATTCTGTTACGCCATGTTCTTTTTCAGAGCAGGCTGCATATGTTGATGATGATATAGTGGGTGTTATTTCTAGTTTGTCTAGCTCCACTTTTAACAGTACTAGGGAGTTACCTGGTTTCTTCTACCATTCTAATGATGGCTCTAATTGTACAGAGCCTGTGTTGGTGTATAGTAACATAGGTGTTTGTAAATCTGGCAGTATTGGCTATGTCCCATCTCAGTCTGGCCAAGTCAAGATTGCACCCATGGTTACTGGGAATATTAGTATTCCCACCAACTTTAGTGTGAGTATTAGGACAGAATATTTACAGCTTTACAACACGCCTGTTAGTGTTGATTGTGCCACATATGTTTGTAATGGTAACTCTCGTTGTAAACAATTACTCACCCAGTACACTGCAGCATGTAAGACCATAGAGTCAGCATTACAACTCAGCGCTAGGCTTGAGTCTGTTGAAGTTAACTCTATGCTTACTATTTCTGAAGAGGCTCTACAGTTAGCTACCATCAGTTCGTTTAATGGTGATGGATACAATTTTACTAATGTGCTGGGTGTTTCTGTGTATGACCCTTCAAGTGGCAGGGTGGTACAAAAAAGGTCTTTTATTGAAGACCTGCTTTTTAATAAAGTGGTTACTAATGGCCTTGGTACTGTTGATGAAGACTATAAGCGCTGTTCTAATGGTCGTTCTGTGGCAGATCTAGTCTGTGCACAGTATTACTCTGGGGGCATGGGACTACCTGGTGTTGTTGACGCTGAGAAGCTTCACATGTATAGTGCGTCTCTCATCGGTGGTATGGTGCTAGGAGGTTTTACTTCTGCAGCGGCATTGCCTTTTAGCTATGCTGTTCAAGCTAGACTTAATTATCTTGCTCTACAGACGGATGTTCTACAGCGGAACCAGCAAATGCTTGCTGAGTCTTTTAACTCTGCTATTGGTAATATAACTTCAGCCTTTGAGAGTGTTAAAGAGGCTATTAGTCAAACTTCCAAGGGTTTGAACACTGTGGCTCATGCGCTTACTAAGGTTCAAGAAGTTGTTAACTCGCAGGGTGCAGCTTTGACTCAACTTACCGTACAGCTGCAACACAACTTCCAAGCCATTTCTAGTTCCATTGATGACATTTATTCTCGACTGGACATTCTTTCAGCTGATGTTCAGGTTGACCGTCTCATCACCGGCAGATTATCAGCACTTAATGCTTTTGTTGCTCAAACCCTCACTAAGTATACTGAGGTTCAGGCTAGCAGGAAGCTAGCACAGCAAAAGGTTAATGAGTGCGTTAAATCGCAATCTCAGCGTTATGGTTTTTGTGGTGGTGATGGCGAGCACATTTTCTCTCTGGTACAGGCAGCACCTCAGGGCCTGCTGTTTTTACATACAGTACTTGTACCGGGTGATTTTGTAGATGTTATTGCCATCGCTGGCTTATGCGTTAACGATGAAATTGCCTTGACTCTACGTGAGCCTGGCTTAGTCTTGTTTACGCATGAACTTCAAAATCATACTGCGACGGAATATTTTGTTTCATCGCGACGTATGTTCGAACCTAGAAAACCTACCGTTAGTGATTTTGTTCAAATTGAGAGTTGTGTGGTCACCTATGTCAATTTGACTAGAGACCCACTACCAGATGGAATCCCAGATTACTTCGATGGCAACAAAACACTTGATGAGATTTTAGCTTCTCTGCCCAATAGAACTGGTCCAAGTCTTCCTTTAGATGTTTTTAATGCCACTTATCTTAATCTCACTGGTGAAATTGCAGATTTAGAGCAGCGTTCAGAGTCTCTCCGTAATACTACAGAGGAGCTCCAAAGTCTTATATATAATATCAACAACACACTAGTTGACCTTGAGTGGCTCAACCGAGTTGAGACATATATCAAGTGGCCGTGGTGGGTTTGGTTGATTATTTTCATTGTTCTCATCTTTGTTGTGTCATTACTAGTGTTCTGCTGCATTTCCACGGGTTGTTGTGGATGCTGCGGCTGCTGCTGTGCTTGTTTTTCAGGTTGTTGTAGGGGTCCTAGACTTCAACCTTACGAAGTTTTTGAAAAGGTCCACGTGCAGTGA'
print(type(dna_seq))


dna_seq = Seq('ATGAAGTCTTTAACTTACTTCTGGTTGCTCTTACCAGTACTTTCAACACTTAGCCTACCACAAGATGTCACTAGGTGCCAGCTCACTACTAATTTTAGGCGGTTCTTTTCAAAATTTAATGTGCAGGCACCTGCTGTCGTTGTTTTGGGTGGCTATTTACCTAGTATGAACTCTTCTAGCTGGTACTGTGGCACAGGCCTTGAAACTGCTAGTGGCGTTCATGGCATTTTTCTCAGTTACATTGATTCTGGTCAAGGCTTTGAGATTGGTATTTCACAGGAGCCGTTTGATCCTAGTGGTTACCAGCTTTACCTACATAAGGCCACTAATGGTAACATTGGTGCTGTTGCACGACTGCGTATTTGCCAGTTTCCAGATAATAAAACATTGGGCCCTTCCAGCGGTGTTACATCAGGTCGTAATTGCCTATTCAACAAAGCTATCCCAGCTCATATGCAGGATGGGAAAAATGTTGTTATCGGCATAACATGGGACAATGATCGTGTCACTGTTTTTGCTGACAAGATCTATCATTTTTATCTTAAAAATGACTGGTCCCGTGTTGCGACAAGATGTTATAATAAAAGAAGTTGTGCTATGCAATATGTTTATACACCTACCTACTACATGCTTAATGTTACTAGTGCAGGTGAGGATGGCATTTATTATCAACCATGTACAGCTAATTGCATTGGTTATGTTGCCAATGTATTTGCTACTGAGCCCAATGGCTACATACCAGAAGGTTTTAGTTTTAATAATTGGTTTCTTTTGTCCAATGATTCCACTTTGGTGCATGGTAAGGGGGTTTCCAACCAACCATTGTTGGTCAATTGTCTTTTGGCCATTCCTAAGATTTATGGACTAGGCCAATTTTTCTCCTTTAATCAAACGATCGATGGGGTTTGTAATGGAGCTTCTGTGCAGCGTGCACCAGAGGCTCTGAGGTTTAATATTAATGACACCTCTGTCATTCTTGCTGAAGGCTCAATTGTACTTCATACTGCTTTTGGAACAAATCTTTCTTTTGTTTGCAGTAATTCCTCAAATCCTCATTTAGCCACCTTTGCCATACCTTTGGGTGCTACCCAAGTACCCTATTATTGTTTTCTTAAAGTGGATACTTACAACTCCACTGTTTATAAATTCTTGGCTGTTTTACCTCCCACCGTCAGGGAAATTGTCATCACCAAGTATGGTGATGTTTATGTCAATGGTTTTGGCTACTTGCATCTCGGTTTGTTGGATGCAGTCACAATTAATTTCACTGGTCATGGCACTGACGATGATGTTTCTGGTTTTTGGACCATAGCATCGACTAATTTTGTTGATGCACTCATCGAAGTTCAAGGAACTTCCATTCAGCGTATTCTTTATTGTGATGATCCTGTTAGCCAACTCAAGTGTTCTCAGGTTGCTTTTGACCTTGACGATGGTTTTTACCCTATTTCTTCTAGAAACCTTCTGAGTCATGAACAGCCAATTTCTTTTGTTACTCTGCCATCATTTAATGATCATTCTTTTGTTAACATTACTGTCTCTGCTTCCTTTGGTGGTCATAGTGGTGCCAACCTTATTGCATCTGACACTACTATCAATGGTTTTAGTTCTTTCTGTGTTGACACTAGACAATTTACCATTTCACTGTTTTATAACGTTACAAACAGTTATGGTTATGTGTCTAAATCACAGGACAGTAATTGCCCTTTCACCTTGCAATCTGTTAATGATTACTTGTCTTTTAGCAAATTTTGTGTTTCCACCAGCCTTTTGGCTAGTGCCTGTACCATAGATCTTTTTGGTTACCCTGAGTTTGGTAGTGGTGTTAAGTTTACGTCCCTTTACTTTCAATTCACAAAGGGTGAGTTGATTACTGGCACGCCTAAACCACTTGAAGGTGTCACGGACGTTTCTTTTATGACTCTGGATGTGTGTACCAAGTATACTATCTATGGCTTTAAAGGCGAGGGTATCATTACCCTTACAAATTCTAGCTTTTTGGCAGGTGTTTATTACACATCTGATTCCGGACAGTTGTTAGCCTTTAAGAATGTCACTAGTGGTGCTGTTTATTCTGTTACGCCATGTTCTTTTTCAGAGCAGGCTGCATATGTTGATGATGATATAGTGGGTGTTATTTCTAGTTTGTCTAGCTCCACTTTTAACAGTACTAGGGAGTTACCTGGTTTCTTCTACCATTCTAATGATGGCTCTAATTGTACAGAGCCTGTGTTGGTGTATAGTAACATAGGTGTTTGTAAATCTGGCAGTATTGGCTATGTCCCATCTCAGTCTGGCCAAGTCAAGATTGCACCCATGGTTACTGGGAATATTAGTATTCCCACCAACTTTAGTGTGAGTATTAGGACAGAATATTTACAGCTTTACAACACGCCTGTTAGTGTTGATTGTGCCACATATGTTTGTAATGGTAACTCTCGTTGTAAACAATTACTCACCCAGTACACTGCAGCATGTAAGACCATAGAGTCAGCATTACAACTCAGCGCTAGGCTTGAGTCTGTTGAAGTTAACTCTATGCTTACTATTTCTGAAGAGGCTCTACAGTTAGCTACCATCAGTTCGTTTAATGGTGATGGATACAATTTTACTAATGTGCTGGGTGTTTCTGTGTATGACCCTTCAAGTGGCAGGGTGGTACAAAAAAGGTCTTTTATTGAAGACCTGCTTTTTAATAAAGTGGTTACTAATGGCCTTGGTACTGTTGATGAAGACTATAAGCGCTGTTCTAATGGTCGTTCTGTGGCAGATCTAGTCTGTGCACAGTATTACTCTGGGGGCATGGGACTACCTGGTGTTGTTGACGCTGAGAAGCTTCACATGTATAGTGCGTCTCTCATCGGTGGTATGGTGCTAGGAGGTTTTACTTCTGCAGCGGCATTGCCTTTTAGCTATGCTGTTCAAGCTAGACTTAATTATCTTGCTCTACAGACGGATGTTCTACAGCGGAACCAGCAAATGCTTGCTGAGTCTTTTAACTCTGCTATTGGTAATATAACTTCAGCCTTTGAGAGTGTTAAAGAGGCTATTAGTCAAACTTCCAAGGGTTTGAACACTGTGGCTCATGCGCTTACTAAGGTTCAAGAAGTTGTTAACTCGCAGGGTGCAGCTTTGACTCAACTTACCGTACAGCTGCAACACAACTTCCAAGCCATTTCTAGTTCCATTGATGACATTTATTCTCGACTGGACATTCTTTCAGCTGATGTTCAGGTTGACCGTCTCATCACCGGCAGATTATCAGCACTTAATGCTTTTGTTGCTCAAACCCTCACTAAGTATACTGAGGTTCAGGCTAGCAGGAAGCTAGCACAGCAAAAGGTTAATGAGTGCGTTAAATCGCAATCTCAGCGTTATGGTTTTTGTGGTGGTGATGGCGAGCACATTTTCTCTCTGGTACAGGCAGCACCTCAGGGCCTGCTGTTTTTACATACAGTACTTGTACCGGGTGATTTTGTAGATGTTATTGCCATCGCTGGCTTATGCGTTAACGATGAAATTGCCTTGACTCTACGTGAGCCTGGCTTAGTCTTGTTTACGCATGAACTTCAAAATCATACTGCGACGGAATATTTTGTTTCATCGCGACGTATGTTCGAACCTAGAAAACCTACCGTTAGTGATTTTGTTCAAATTGAGAGTTGTGTGGTCACCTATGTCAATTTGACTAGAGACCCACTACCAGATGGAATCCCAGATTACTTCGATGGCAACAAAACACTTGATGAGATTTTAGCTTCTCTGCCCAATAGAACTGGTCCAAGTCTTCCTTTAGATGTTTTTAATGCCACTTATCTTAATCTCACTGGTGAAATTGCAGATTTAGAGCAGCGTTCAGAGTCTCTCCGTAATACTACAGAGGAGCTCCAAAGTCTTATATATAATATCAACAACACACTAGTTGACCTTGAGTGGCTCAACCGAGTTGAGACATATATCAAGTGGCCGTGGTGGGTTTGGTTGATTATTTTCATTGTTCTCATCTTTGTTGTGTCATTACTAGTGTTCTGCTGCATTTCCACGGGTTGTTGTGGATGCTGCGGCTGCTGCTGTGCTTGTTTTTCAGGTTGTTGTAGGGGTCCTAGACTTCAACCTTACGAAGTTTTTGAAAAGGTCCACGTGCAGTGA')
print(type(dna_seq))

# fmi https://biopython.org/docs/1.75/api/Bio.Blast.NCBIWWW.html
# perform BLAST search against the nucleotide database (nt) using BLASTN
result_handle = NCBIWWW.qblast("blastn", "nt", dna_seq)

# parse the results (this part depends on your desired output format)
blast_qresult = SearchIO.read(result_handle, "blast-xml")

# print the results
print(blast_qresult)

#extract description of the first 5 blast hits
[hit.description for hit in blast_qresult[:5]]

#extract information about the first hit
first_hit = blast_qresult[0]

#extract description about the first hit
first_hit.description

#extract results the first hit
#evalue - smaller e-value suggests a more significant match, meaning the alignment is less likely to have occurred by chance
#bitscore - a higher bit score generally indicates a better and more significant alignment, meaning the two sequences are more similar
first_hsp = first_hit[0]
print(first_hsp.evalue, first_hsp.bitscore)

#extract id from the first hit
first_hit.id

#parse ncbi accession for first hit
NCBI_id = first_hit.id.split('|')[3]
NCBI_id

#obtain genbank information for the first hit
#db=database
#id=accession number
#retmode = retreival mode
#rettype = retrieval type

handle = Entrez.efetch(db="nucleotide", id= NCBI_id, retmode="text", rettype="gb")
genbank_record = SeqIO.read(handle, "genbank")
genbank_record

#evaluate annotations from first hit
genbank_record.annotations

#retrieve molecule type
genbank_record.annotations["molecule_type"]

#retrieve taxonomic information
genbank_record.annotations["taxonomy"]

#retrieve references
for reference in genbank_record.annotations["references"]:
    print(reference)

#retrieve full genbank record for the first hit
stream = Entrez.efetch(db="nucleotide", id=NCBI_id, rettype="gb", retmode="text")
print(stream.read())

"""# Ensembl

"""

#fmi https://ensemblrest.readthedocs.io/en/latest/
!pip install ensembl_rest
import ensembl_rest

ensembl_rest.symbol_lookup(
        species='homo sapiens',
        symbol='BRCA1'
    )

ensembl_rest.symbol_post(species='human',
                             params={'symbols': ["BRCA1",
                                                 "BRCA2" ]})

ensembl_rest.sequence_id('PHUM125150')

ensembl_rest.sequence_id('PHUM125150')['seq']

ensembl_rest.sequence_id(
        'PHUM125150',
        headers={'content-type': 'text/x-fasta'})